// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/repository.go -destination=internal/mocks/mock_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	config "github.com/mp1947/ya-url-shortener/config"
	dto "github.com/mp1947/ya-url-shortener/internal/dto"
	model "github.com/mp1947/ya-url-shortener/internal/model"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteBatch mocks base method.
func (m *MockRepository) DeleteBatch(ctx context.Context, shortURLs model.BatchDeleteShortURLs) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", ctx, shortURLs)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockRepositoryMockRecorder) DeleteBatch(ctx, shortURLs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockRepository)(nil).DeleteBatch), ctx, shortURLs)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, shortURL string) (model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, shortURL)
	ret0, _ := ret[0].(model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, shortURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, shortURL)
}

// GetInternalStats mocks base method.
func (m *MockRepository) GetInternalStats(ctx context.Context) (*dto.InternalStatsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternalStats", ctx)
	ret0, _ := ret[0].(*dto.InternalStatsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternalStats indicates an expected call of GetInternalStats.
func (mr *MockRepositoryMockRecorder) GetInternalStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalStats", reflect.TypeOf((*MockRepository)(nil).GetInternalStats), ctx)
}

// GetType mocks base method.
func (m *MockRepository) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockRepositoryMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockRepository)(nil).GetType))
}

// GetURLsByUserID mocks base method.
func (m *MockRepository) GetURLsByUserID(ctx context.Context, userID string) ([]model.UserURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLsByUserID", ctx, userID)
	ret0, _ := ret[0].([]model.UserURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLsByUserID indicates an expected call of GetURLsByUserID.
func (mr *MockRepositoryMockRecorder) GetURLsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLsByUserID", reflect.TypeOf((*MockRepository)(nil).GetURLsByUserID), ctx, userID)
}

// Init mocks base method.
func (m *MockRepository) Init(ctx context.Context, cfg config.Config, l *zap.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, cfg, l)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockRepositoryMockRecorder) Init(ctx, cfg, l any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockRepository)(nil).Init), ctx, cfg, l)
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, shortURLID, originalURL, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, shortURLID, originalURL, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, shortURLID, originalURL, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, shortURLID, originalURL, userID)
}

// SaveBatch mocks base method.
func (m *MockRepository) SaveBatch(ctx context.Context, urls []model.URLWithCorrelation, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", ctx, urls, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockRepositoryMockRecorder) SaveBatch(ctx, urls, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*MockRepository)(nil).SaveBatch), ctx, urls, userID)
}
